/*
 * AnnoyODroid (c) by Jorge Antonio Diaz-Benito Soriano
 *
 * AnnoyODroid is licensed under a Creative Commons Attribution 4.0 International License.
 *
 * You should have received a copy of the license along with this work. If not, see http://creativecommons.org/licenses/by/4.0/.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        def classpathDependencies = rootProject.ext.classpathDependencies

        classpath classpathDependencies.androidMavenGradle
        classpath classpathDependencies.jsonSchema2Pojo
        classpath classpathDependencies.gradleVersions
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'jsonschema2pojo'

group = 'com.github.stoyicker'

android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode rootProject.ext.libraryVersionCode
        versionName rootProject.ext.libraryVersionName
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}

tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError true
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

/**
 * Due to a bug, the coverage reported by JaCoCo only corresponds to instrumentation tests. To include te results from unit tests, a small workaround is required.
 */
project.afterEvaluate {
    def append = "append=true"
    def destFile = "destfile=$buildDir/outputs/code-coverage/connected/coverage.ec"
    testDebugUnitTest.jvmArgs "-javaagent:$buildDir/intermediates/jacoco/jacocoagent.jar=$append,$destFile"

    createDebugAndroidTestCoverageReport.dependsOn testDebugUnitTest
}

dependencies {
    def runDependencies = rootProject.ext.runDependencies
    def testDependencies = rootProject.ext.testDependencies

    compile runDependencies.commonsLang
    compile runDependencies.retrofitGsonConverter
    compile runDependencies.supportAnnotations
    compile runDependencies.glassfishAnnotations

    provided runDependencies.retrofit
    provided runDependencies.retrofitRxJavaAdapter

    testCompile testDependencies.jUnit4
    testCompile testDependencies.mockito
    testCompile testDependencies.powerMockJUnit4
    testCompile testDependencies.powerMock
}

//apply from: "model/generate.gradle"